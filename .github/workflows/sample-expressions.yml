name: study-github-action-expressions
run-name: ${{ github.actor }} is studying github-action expressions
on: [push]
jobs:
  prepare-json:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      sample-json: ${{ steps.sample-json.outputs.json }}
      sample-array: ${{ steps.sample-array.outputs.array }}
    steps:
      - id: set-matrix
        run: echo "matrix={\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}" >> $GITHUB_OUTPUT
      - id: sample-json
        run: echo "json={\"foo\":\"bar\"}" >> $GITHUB_OUTPUT
      - id: sample-array
        run: echo "array=[1, 2, 3]" >> $GITHUB_OUTPUT

  sample-expressions:
    runs-on: ubuntu-latest
    needs: prepare-json
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: literals
        run: |
          echo $myNull
          echo $myBoolean
          echo $myInt
          echo $myFloat
          echo $myHex
          echo $myExponential
          echo $myString
          echo $myStringInBraces
          echo $myErrStringInBraces
        env:
          myNull: ${{ null }}
          myBoolean: ${{ true }}
          myInt: ${{ 7 }}
          myFloat: ${{ 7.7 }}
          myHex: ${{ 0x77 }}
          myExponential: ${{ -2.99e-2 }}
          myString: This is a string
          myStringInBraces: ${{ 'It''s open source!' }}
          # myErrStringInBraces: ${{ "It's open source!" }}

      - name: operators
        run: |
          echo $expr1
          echo $expr2
          echo $expr3
          echo $expr4
          echo $expr5
          echo $expr6
          echo $expr7
          echo $expr8
          echo $expr9
        env:
          expr1: ${{ !false }}
          expr2: ${{ 2 > 1 }}
          expr3: ${{ 1 < 2 }}
          expr4: ${{ 1 <= 1 }}
          expr5: ${{ 2 >= 2 }}
          expr6: ${{ 'a' == 'a' }}
          expr7: ${{ 'a' != 'b' }}
          expr8: ${{ true && true }}
          expr9: ${{ true || false }}

      - name: loose equality comparisons
        run: |
          echo $expr1
          echo $expr2
          echo $expr3
          echo $expr4
          echo $expr5
          echo $expr6
          echo $expr7
          echo $expr8
          echo $expr9
          echo $expr10
        env:
          # If the types do not match, GitHub casts the type to a number or NaN.
          # null => 0
          # true => 1
          # false => 0
          # array => NaN
          # object => NaN
          expr1: ${{ null == 0}}
          expr2: ${{ true == 1 }}
          expr3: ${{ false == 0 }}
          expr4: ${{ '' == 0 }}
          expr5: ${{ fromJSON('[]') != NaN }}
          expr6: ${{ fromJSON('{}') != NaN }}
          expr7: ${{ NaN != NaN }}
          expr8: ${{ 'a' == 'A' }}
          expr9: ${{ fromJSON('[1]') != fromJSON('[1]') }}
          expr10: ${{ fromJSON('{}') != fromJSON('{}') }}

      - name: built-in functions
        run: |
          echo $contains1
          echo $contains2
          echo $contains3
          echo $startsWith1
          echo $endsWith1
          echo $format1
          echo $join1
          echo $join2
          echo $toJSON1
          echo ${{ fromJSON(needs.prepare-json.outputs.matrix) }}
          echo ${{ fromJSON(needs.prepare-json.outputs.sample-json) }}
          echo $hashFiles1
          echo $hashFiles2
          ls -la
        env:
          # if the types do not match, GitHub casts the type to a string
          # null => ''
          # boolean => 'true', 'false'
          contains1: ${{ contains('abc', 'A') }}
          contains2: ${{ contains(toJSON('[1, 2, 3]'), 1) }}
          contains3: ${{ contains(fromJSON('["push", "pull_request"]'), github.event_name) }}
          startsWith1: ${{ startsWith('Hello world!', 'he') }}
          endsWith1: ${{ endsWith('Hello world!', 'd!') }}
          format1: ${{ format('Hello {0}, {1} and {2}', 'a', 'b', 'c') }}
          join1: ${{ join(needs.prepare-json.outputs.sample-array) }}
          join2: ${{ join(needs.prepare-json.outputs.sample-array, '/') }}
          toJSON1: ${{ toJSON(needs.prepare-json.outputs) }}
          # These code below occur an error because their types are object
          # fromJSON1: ${{ fromJSON(needs.prepare-json.outputs.matrix) }}
          # fromJSON2: ${{ fromJSON(needs.prepare-json.outputs.sample-json) }}
          hashFiles1: ${{ hashFiles('**/index.html') }}
          hashFiles2: ${{ hashFiles('README.md') }}
